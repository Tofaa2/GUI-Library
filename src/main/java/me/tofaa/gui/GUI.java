package me.tofaa.gui;

import lombok.Getter;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public abstract class GUI implements InventoryHolder {

    /**
     * The inventory of the GUI
     */
    private final Inventory inventory;

    /**
     * The amount of rows the inventory will have
     * (default: 3)
     * We use rows in case a gui is miscalculated
     */
    @Getter private final int rows;

    /**
     * The title of the GUI
     * Title is automatically chat colored
     */
    @Getter private final String title;

    /**
     * The pattern of the fillers inside the gui
     * @see FILLER_PATTERN
     */
    @Getter private final FILLER_PATTERN fillerPattern;

    /**
     * The main filler used for patterns
     */
    protected final ItemStack FILLER_MAIN = createInventoryItem(
            Material.STAINED_GLASS_PANE,
            1,
            " ",
            Collections.singletonList(" "),
            false,
            (short) 0);

    /**
     * The secondary filler used for patterns
     */
    protected final ItemStack FILLER_SECONDARY = createInventoryItem(
            Material.STAINED_GLASS_PANE,
            1,
            " ",
            Collections.singletonList(" "),
            false,
            (short) 15);

    /**
     * The close button for GUI's
     * This doesn't get auto generated by the setContents() method
     * in case someone wants to add a custom or a close button in another slot
     * There is a helper method for detecting if clicked slot is the close button the close button however
     */
    protected final ItemStack CLOSE_BUTTON = createInventoryItem(
            Material.BARRIER,
            1,
            "&cClose",
            Arrays.asList(" ", "&7Click to close the GUI"),
            true,
            (short) 0);

    /**
     * The default click sound for an item in the GUI
     */
    @Getter private final Sound clickSound;

    /**
     * The default opening sound for the GUI
     */
    @Getter private final Sound openSound;


    public GUI(String title, int rows, FILLER_PATTERN fillerPattern, Sound clickSound, Sound openSound){
        this.title = title;
        if (rows > 6){
            this.rows = 6;
            Bukkit.getLogger().warning(" The GUI " + title + " has more than 6 rows, it will be capped at 6");
        }
        else {
            this.rows = rows;
        }
        this.inventory = Bukkit.createInventory(this, rows * 9, ChatColor.translateAlternateColorCodes('&', title));
        this.fillerPattern = fillerPattern;
        this.clickSound = clickSound;
        this.openSound = openSound;
    }

    public GUI(String title, int rows,  FILLER_PATTERN fillerPattern){
        this(title, rows, fillerPattern,Sound.CLICK, Sound.CHEST_OPEN);
    }
    public GUI(String title, int rows){
        this(title, rows, FILLER_PATTERN.SOLID);
    }


    public abstract void onClick(InventoryClickEvent event);
    public abstract void setContents();

    public void open(Player player){
        player.closeInventory();
        fillGUI();
        setContents(); // You can check if the inventory is empty before calling this, but this way it's updating every time
        player.openInventory(this.inventory);
        playOpenSound(player);
    }





    @Override
    public Inventory getInventory() {
        return inventory;
    }

    protected void fillGUI(){
        switch (this.fillerPattern){
            case CHECKERED:
                for (int i = 0; i < inventory.getSize(); i++){
                    if (i % 2 == 0){
                        inventory.setItem(i, FILLER_MAIN);
                        continue;
                    }
                    inventory.setItem(i, FILLER_SECONDARY);
                }
                break;
            case STRIPED:
                for (int i = 0; i < inventory.getSize(); i++){
                    if (i % 9 == 0 || i % 9 == 8){
                        inventory.setItem(i, FILLER_MAIN);
                        continue;
                    }
                    inventory.setItem(i, FILLER_SECONDARY);
                }
                break;

            case SOLID:
                int last9 = this.inventory.getSize() - 9;
                for (int i = 0; i < last9; i++) {
                    this.inventory.setItem(i, FILLER_MAIN);
                }
                for (int i = last9; i < this.inventory.getSize(); i++) {
                    this.inventory.setItem(i, FILLER_SECONDARY);
                }
        }

    }


    /**
     * Helper method for creating an item
     * @param material The material of the item
     * @param amount The amount of the item
     * @param name The name of the item (chat color will be applied)
     * @param lore The lore of the item (chat color will be applied)
     * @param isGlowing Whether the item is glowing or not
     * @param damage The damage value of the item (for stained-glass etc)
     * @return The item created
     */
    protected ItemStack createInventoryItem(Material material, int amount, String name, List<String> lore, boolean isGlowing, short damage){
        ItemStack item = new ItemStack(material, amount, damage);
        ItemMeta meta = item.getItemMeta();

        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', name));
        lore.forEach(line -> line = ChatColor.translateAlternateColorCodes('&', line));
        meta.setLore(lore);
        meta.addItemFlags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_ENCHANTS);
        if (isGlowing){
            meta.addEnchant(Enchantment.DURABILITY, 1, true);
        }
        item.setItemMeta(meta);
        return item;
    }

    public void playClickSound(Player player){
        player.playSound(player.getLocation(), clickSound, 1, 1);
    }
    public void playOpenSound(Player player) { player.playSound(player.getLocation(), openSound, 1, 1);}
}
